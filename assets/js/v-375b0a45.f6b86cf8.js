"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[263],{9922:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-375b0a45",path:"/guide/services/sms.html",title:"SMS Service",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"guide/services/sms.md",git:{updatedTime:1634291321e3,contributors:[{name:"Anton",email:"a.shumansky@gmail.com",commits:1}]}}},6264:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(6252).uE)('<h1 id="sms-service" tabindex="-1"><a class="header-anchor" href="#sms-service" aria-hidden="true">#</a> SMS Service</h1><p>This service is capable of sending simple message and otp message and also calling by different sms providers . for now we support 3 sms providers : <code>twilio</code> <code>sinch</code> <code>kavenegar</code></p><p>Register the service into your <code>main.go</code> file:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>registry<span class="token punctuation">.</span><span class="token function">ServiceProviderSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Access the service:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h5 id="dependencies" tabindex="-1"><a class="header-anchor" href="#dependencies" aria-hidden="true">#</a> Dependencies :</h5><p><code>ClockService</code></p><p>and also when registering the service you need to pass it the <code>LogEntity</code> that is responsible to log every action made by sms service :</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> LogEntity <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n    beeorm<span class="token punctuation">.</span>Entity\n    <span class="token function">SetStatus</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>\n    <span class="token function">SetTo</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>\n    <span class="token function">SetText</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>\n    <span class="token function">SetFromPrimaryGateway</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>\n    <span class="token function">SetFromSecondaryGateway</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>\n    <span class="token function">SetPrimaryGatewayError</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>\n    <span class="token function">SetSecondaryGatewayError</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>\n    <span class="token function">SetType</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>\n    <span class="token function">SetSentAt</span><span class="token punctuation">(</span>time time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>for example :</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>\n\tSMSTrackerTypeSMS     <span class="token operator">=</span> <span class="token string">&quot;sms&quot;</span>\n\tSMSTrackerTypeCallout <span class="token operator">=</span> <span class="token string">&quot;callout&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">type</span> smsTrackerTypeAll <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tSMSTrackerTypeSMS     <span class="token builtin">string</span>\n\tSMSTrackerTypeCallout <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> SMSTrackerTypeAll <span class="token operator">=</span> smsTrackerTypeAll<span class="token punctuation">{</span>\n\tSMSTrackerTypeSMS<span class="token punctuation">:</span>     SMSTrackerTypeSMS<span class="token punctuation">,</span>\n\tSMSTrackerTypeCallout<span class="token punctuation">:</span> SMSTrackerTypeCallout<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> SmsTrackerEntity <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tbeeorm<span class="token punctuation">.</span>ORM               <span class="token string">`orm:&quot;table=sms_tracker&quot;`</span>\n\tID                    <span class="token builtin">uint64</span>\n\tStatus                <span class="token builtin">string</span>\n\tTo                    <span class="token builtin">string</span> <span class="token string">`orm:&quot;varchar=15&quot;`</span>\n\tText                  <span class="token builtin">string</span>\n\tFromPrimaryGateway    <span class="token builtin">string</span>\n\tFromSecondaryGateway  <span class="token builtin">string</span>\n\tPrimaryGatewayError   <span class="token builtin">string</span>\n\tSecondaryGatewayError <span class="token builtin">string</span>\n\tType                  <span class="token builtin">string</span>    <span class="token string">`orm:&quot;enum=entity.SMSTrackerTypeAll;required&quot;`</span>\n\tSentAt                time<span class="token punctuation">.</span>Time <span class="token string">`orm:&quot;time&quot;`</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>we have 2 providers active at the same time <code>primary</code> <code>secondary</code> and when send via primary fails we try to send with the secondary provider.</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">SendOTPSMS</span><span class="token punctuation">(</span><span class="token operator">*</span>OTP<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">func</span> <span class="token function">SendOTPCallout</span><span class="token punctuation">(</span><span class="token operator">*</span>OTP<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">func</span> <span class="token function">SendMessage</span><span class="token punctuation">(</span><span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol><li>The <code>SendOTPSMS</code> send otp sms by providing the otp data</li></ol><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> OTP <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tOTP      <span class="token builtin">string</span>\n\tNumber   <span class="token builtin">string</span>\n\tCC       <span class="token builtin">string</span>\n\tProvider <span class="token operator">*</span>Provider\n\tTemplate <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li>The <code>SendOTPCallout</code> used to call and tell the otp code</li><li>The <code>SendMessage</code> used to send simple message</li></ol><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> Message <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tText     <span class="token builtin">string</span>\n\tNumber   <span class="token builtin">string</span>\n\tProvider <span class="token operator">*</span>Provider\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="configs" tabindex="-1"><a class="header-anchor" href="#configs" aria-hidden="true">#</a> configs</h5><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">sms</span><span class="token punctuation">:</span>\n  <span class="token key atrule">twilio</span><span class="token punctuation">:</span>\n    <span class="token key atrule">sid</span><span class="token punctuation">:</span> ENV<span class="token punctuation">[</span>SMS_TWILIO_SID<span class="token punctuation">]</span>\n    <span class="token key atrule">token</span><span class="token punctuation">:</span> ENV<span class="token punctuation">[</span>SMS_TWILIO_TOKEN<span class="token punctuation">]</span>\n    <span class="token key atrule">from_number</span><span class="token punctuation">:</span> ENV<span class="token punctuation">[</span>SMS_TWILIO_FROM_NUMBER<span class="token punctuation">]</span>\n    <span class="token key atrule">authy_url</span><span class="token punctuation">:</span> ENV<span class="token punctuation">[</span>SMS_TWILIO_AUTHY_URL<span class="token punctuation">]</span>\n    <span class="token key atrule">authy_api_key</span><span class="token punctuation">:</span> ENV<span class="token punctuation">[</span>SMS_TWILIO_AUTHY_API_KEY<span class="token punctuation">]</span>\n    <span class="token key atrule">verify_url</span><span class="token punctuation">:</span> ENV<span class="token punctuation">[</span>SMS_TWILIO_VERIFY_URL<span class="token punctuation">]</span>\n    <span class="token key atrule">verify_sid</span><span class="token punctuation">:</span> ENV<span class="token punctuation">[</span>SMS_TWILIO_VERIFY_SID<span class="token punctuation">]</span>\n  <span class="token key atrule">kavenegar</span><span class="token punctuation">:</span>\n    <span class="token key atrule">api_key</span><span class="token punctuation">:</span> ENV<span class="token punctuation">[</span>SMS_KAVENEGAR_API_KEY<span class="token punctuation">]</span>\n    <span class="token key atrule">sender</span><span class="token punctuation">:</span> ENV<span class="token punctuation">[</span>SMS_KAVENEGAR_SENDER<span class="token punctuation">]</span>\n  <span class="token key atrule">sinch</span><span class="token punctuation">:</span>\n    <span class="token key atrule">app_id</span><span class="token punctuation">:</span> ENV<span class="token punctuation">[</span>SMS_SINCH_APP_ID<span class="token punctuation">]</span>\n    <span class="token key atrule">app_secret</span><span class="token punctuation">:</span> ENV<span class="token punctuation">[</span>SMS_SINCH_APP_SECRET<span class="token punctuation">]</span>\n    <span class="token key atrule">msg_url</span><span class="token punctuation">:</span> ENV<span class="token punctuation">[</span>SMS_SINCH_MSG_URL<span class="token punctuation">]</span>\n    <span class="token key atrule">from_number</span><span class="token punctuation">:</span> ENV<span class="token punctuation">[</span>SMS_SINCH_FROM_NUMBER<span class="token punctuation">]</span>\n    <span class="token key atrule">call_url</span><span class="token punctuation">:</span> ENV<span class="token punctuation">[</span>SMS_SINCH_CALL_URL<span class="token punctuation">]</span>\n    <span class="token key atrule">caller_number</span><span class="token punctuation">:</span> ENV<span class="token punctuation">[</span>SMS_SINCH_CALLER_NUMBER<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>',20),p={},t=(0,a(3744).Z)(p,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);